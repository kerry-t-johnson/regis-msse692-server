---
# ============================================================================
# Namespace: thingbook
# ----------------------------------------------------------------------------
# A namespace is a logical organization of resources within a single
# Kubernetes cluster.
#
# By using namespaces, a cluster admin may retain control of all cluster
# resources while granting limited administration capabilities within a
# namespace.
# ============================================================================
apiVersion: v1
kind: Namespace
metadata:
  name: thingbook


---
# ============================================================================
# ServiceAccount: thingbook-svc
# ----------------------------------------------------------------------------
# Service accounts provide an identity (and role) for processes within a
# Kubernetes pod.
#
# In this case, we are creating a Service Account in order to give the Pod
# access to the Kubernetes API.
# ============================================================================
apiVersion: v1
kind: ServiceAccount
metadata:
  name: thingbook-svc
  namespace: thingbook


---
# ============================================================================
# ClusterRoleBinding: thingbook-svc -to- cluster-admin
# ----------------------------------------------------------------------------
# A Cluster Role has permissions at the cluster level (vice within a
# namespace).  A Cluster Role Binding allocates a Cluster Role to a Subject
# (such as a ServiceAccount).
#
# Here, we give thingbook-svc ServiceAccount the cluster-admin Cluster Role.
#
# NOTE: This role level far exceeds the actual needs of thingbook-svc, but
#       was the simplest way to get up and running.  THIS SHOULD BE REVIEWED.
# ============================================================================
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: thingbook-svc
subjects:
  - kind: ServiceAccount
    name: thingbook-svc
    namespace: thingbook
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io


---
# ============================================================================
# Service: thingbook-redis
# ----------------------------------------------------------------------------
# A Service provides a "permanent" abstraction to ephemeral Pod resources.
# ============================================================================
apiVersion: v1
kind: Service
metadata:
  name: thingbook-redis
  namespace: thingbook
  labels:
    name: thingbook-redis
    tier: data
spec:
  clusterIP: None
  ports:
    - port: 6379
      targetPort: 6379
  selector:
    role: thingbook-redis


---
# ============================================================================
# Service: thingbook-ui
# ----------------------------------------------------------------------------
# A Service provides a "permanent" abstraction to ephemeral Pod resources.
#
# This Service type is "ClusterIP" which allocates a cluster-internal IP
# address for load-balancing to endpoints. Endpoints are determined by the
# selector...
# ============================================================================
apiVersion: v1
kind: Service
metadata:
  name: thingbook-ui
  namespace: thingbook
  labels:
    name: thingbook-ui
    tier: presentation
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 80
  selector:
    role: thingbook-ui


---
# ============================================================================
# Service: thingbook-api
# ----------------------------------------------------------------------------
# A Service provides a "permanent" abstraction to ephemeral Pod resources.
#
# This Service type is "ClusterIP" which allocates a cluster-internal IP
# address for load-balancing to endpoints. Endpoints are determined by the
# selector...
# ============================================================================
apiVersion: v1
kind: Service
metadata:
  name: thingbook-api
  namespace: thingbook
  labels:
    name: thingbook-api
    tier: presentation
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: 3000
  selector:
    role: thingbook-api


---
# ============================================================================
# Service: thingbook-mqtt
# ----------------------------------------------------------------------------
# A Service provides a "permanent" abstraction to ephemeral Pod resources.
#
# This Service type is "ClusterIP" which allocates a cluster-internal IP
# address for load-balancing to endpoints. Endpoints are determined by the
# selector...
# ============================================================================
apiVersion: v1
kind: Service
metadata:
  name: thingbook-mqtt
  namespace: thingbook
  labels:
    name: thingbook-mqtt
spec:
  type: ClusterIP
  ports:
    - name: mqtt
      port: 1883
  selector:
    role: thingbook-mqtt


---
# ============================================================================
# Ingress: thingbook-ingress
# ----------------------------------------------------------------------------
# Ingress is a collection of rules that allow inbound connections to reach the
# endpoints defined by a backend. An Ingress can be configured to give
# services externally-reachable URLs.
# ============================================================================
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: thingbook-ingress
  namespace: thingbook
spec:
  rules:
    - host: www.thingbroker.org
      http:
        paths:
          # This entry directs all /api/* traffic to the ThingBook REST API
          # service
          - path: /api
            pathType: Prefix
            backend:
              service:
                name: thingbook-api
                port:
                  number: 3000
          # This entry directs all /socket.io/* traffic (Websocket requests) to
          # the ThingBook REST API service
          - path: /socket.io
            pathType: Prefix
            backend:
              service:
                name: thingbook-api
                port:
                  number: 3000
                      # This entry directs all / traffic to the ThingBook User Interface
          # service
          - path: /
            pathType: Exact
            backend:
              service:
                name: thingbook-ui
                port:
                  number: 80
          - path: /static
            pathType: Prefix
            backend:
              service:
                name: thingbook-ui
                port:
                  number: 80
            

---
# ============================================================================
# Deployment: thingbook-ui
# ----------------------------------------------------------------------------
# A Deployment creates Pods within a Cluster and may specify a preferred
# replication count.  Unlike StatefulSets, a Deployment has no guarantees
# regarding startup order or Pod names.
#
# This deployment instantiates a container which serves the ReactJS User
# Interface
# ============================================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: thingbook-ui
  namespace: thingbook
  labels:
    k8s-app: thingbook-ui
spec:
  replicas: 1
  selector:
    matchLabels:
      role: thingbook-ui
  template:
    metadata:
      labels:
        role: thingbook-ui
    spec:
      containers:
      - name: thingbook-ui
        image: kerrytjohnson/thingbook-react-ui:master
        imagePullPolicy: Always
        ports:
        - containerPort: 80
          name: thingbook-ui
          protocol: TCP


---
# ============================================================================
# Deployment: thingbook-api
# ----------------------------------------------------------------------------
# A Deployment creates Pods within a Cluster and may specify a preferred
# replication count.  Unlike StatefulSets, a Deployment has no guarantees
# regarding startup order or Pod names.
#
# This deployment instantiates a container which implements the Thingbook
# REST API.
# ============================================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: thingbook-api
  namespace: thingbook
  labels:
    k8s-app: thingbook-api
spec:
  replicas: 1
  selector:
    matchLabels:
      role: thingbook-api
  template:
    metadata:
      labels:
        role: thingbook-api
    spec:
      containers:
        - name: thingbook-server
          image: kerrytjohnson/thingbook-server:master
          imagePullPolicy: Always
          env:
            - name: DATABASE_URL
              value: mongodb://mongo-replica-0.mongo,mongo-replica-1.mongo,mongo-replica-2.mongo/thingbook?replicaSet=rs0
          ports:
            - name: thingbook-api
              containerPort: 3000
              protocol: TCP


---
# ============================================================================
# Deployment: thingbook-redis
# ----------------------------------------------------------------------------
# A Deployment creates Pods within a Cluster and may specify a preferred
# replication count.  Unlike StatefulSets, a Deployment has no guarantees
# regarding startup order or Pod names.
# ============================================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: thingbook-redis
  namespace: thingbook
  labels:
    k8s-app: thingbook-redis
spec:
  replicas: 1
  selector:
    matchLabels:
      role: thingbook-redis
  template:
    metadata:
      labels:
        role: thingbook-redis
    spec:
      containers:
        - name: thingbook-redis
          image: redis:6.2-buster
          ports:
            - containerPort: 6379
              name: thingbook-redis
              protocol: TCP


---
# ============================================================================
# Deployment: thingbook-mqtt
# ----------------------------------------------------------------------------
# A Deployment creates Pods within a Cluster and may specify a preferred
# replication count.  Unlike StatefulSets, a Deployment has no guarantees
# regarding startup order or Pod names.
# ============================================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: thingbook-mqtt
  namespace: thingbook
  labels:
    k8s-app: thingbook-mqtt
spec:
  replicas: 1
  selector:
    matchLabels:
      role: thingbook-mqtt
  template:
    metadata:
      labels:
        role: thingbook-mqtt
    spec:
      containers:
        - name: thingbook-mqtt
          image: hivemq/hivemq-ce
          ports:
            - name: mqtt
              containerPort: 1883
              protocol: TCP



---
# ============================================================================
# Service: mongo
# ----------------------------------------------------------------------------
# A Service provides a "permanent" abstraction to ephemeral Pod resources.
#
# The mongo Service below is "headless" in that it cannot be accessed outside
# of the Kubernetes cluster, providing a reduced attach vector.
# ============================================================================
apiVersion: v1
kind: Service
metadata:
  name: mongo
  namespace: thingbook
  labels:
    name: mongo
    tier: data
spec:
  ports:
    - port: 27017
      targetPort: 27017
  clusterIP: None
  selector:
    role: mongo


---
# ============================================================================
# StatefulSet: mongo
# ----------------------------------------------------------------------------
# A StatefulSet manages a deployment of Pods and provides guarantees about
# the ordering and uniqueness of the Pods.  For example, the Pods are named
# 0, 1, ... n-1 and will be brought up in that order.
#
# NOTE: We cannot use a Kubernetes ReplicaSet because in Kubernetes, replicas
#       cannot be reliably distinguished from each other.
# ============================================================================
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongo-replica
  namespace: thingbook
  labels:
    tier: data
# --- StatefulSet specification
spec:
  selector:
    matchLabels:
      role: mongo
  serviceName: mongo
  replicas: 3
  template:
    metadata:
      labels:
        role: mongo
    # --- Pod specification (template)
    spec:
      terminationGracePeriodSeconds: 10
      serviceAccount: thingbook-svc
      containers:
        - name: mongo
          image: mongo:4.4.3-bionic
          args: 
            - "--replSet=rs0"
            - "--bind_ip=0.0.0.0"
          ports:
            - containerPort: 27017
          volumeMounts:
            - name: mongo-pv
              mountPath: /data/db
        - name: mongo-sidecar
          image: cvallance/mongo-k8s-sidecar
          env:
            - name: KUBE_NAMESPACE
              value: thingbook
            - name: MONGO_SIDECAR_POD_LABELS
              value: "role=mongo"
            - name: KUBERNETES_MONGO_SERVICE_NAME
              value: mongo
            - name: MONGODB_DATABASE
              value: thingbook
  volumeClaimTemplates:
    - metadata:
        name: mongo-pv
      spec:
        storageClassName: gp2
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 20Gi

